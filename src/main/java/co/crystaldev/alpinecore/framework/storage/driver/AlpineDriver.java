package co.crystaldev.alpinecore.framework.storage.driver;

import co.crystaldev.alpinecore.framework.storage.KeySerializer;
import com.google.common.collect.ImmutableMap;
import org.bukkit.OfflinePlayer;
import org.jetbrains.annotations.NotNull;

import java.util.UUID;

/**
 * Responsible for saving key-data pairs to a
 * backend source. Used to back an {@link co.crystaldev.alpinecore.framework.storage.AlpineStore}.
 *
 * @param <K> The type of the key
 * @param <D> The type of the data
 *
 * @author Thomas Wearmouth
 * @since 0.1.0
 */
public abstract class AlpineDriver<K, D> {
    // TODO: how can we allow plugins to modify these without affecting other plugins?
    /** Map of key types to their respective serializers */
    protected static final ImmutableMap<Class<?>, KeySerializer<?, ?>> SERIALIZERS = new ImmutableMap.Builder<Class<?>, KeySerializer<?, ?>>()
            .put(Number.class, new KeySerializer.NumberKey())
            .put(String.class, new KeySerializer.StringKey())
            .put(UUID.class, new KeySerializer.UuidKey())
            .put(OfflinePlayer.class, new KeySerializer.PlayerKey())
            .build();

    /**
     * Save data under a given key.
     * <p>
     * Any exceptions generated by this method are
     * swallowed.
     *
     * @param key The key
     * @param data The data to save
     * @return Whether the operation was successful
     */
    public abstract boolean persistEntry(@NotNull K key, @NotNull D data);

    /**
     * Delete data under a given key.
     *
     * @param key The key
     * @return Whether the operation was successful
     */
    public abstract boolean deleteEntry(@NotNull K key);

    /**
     * Check if a key has any saved data.
     * <p>
     * Any exceptions generated by this method are
     * swallowed.
     *
     * @param key The key
     * @return Whether there is an entry for they key
     */
    public abstract boolean hasEntry(@NotNull K key);

    /**
     * Retrieve data for a given key.
     * <p>
     * Due to limitations of the caching layer,
     * this method must never return null.
     * <p>
     * Always use {@link AlpineDriver#hasEntry(Object)}
     * before attempting to retrieve an entry.
     * <p>
     * Any exceptions generated by this method are
     * NOT swallowed.
     *
     * @param key The key
     * @return The data associated with the key
     */
    @NotNull
    public abstract D retrieveEntry(@NotNull K key) throws Exception;
}
